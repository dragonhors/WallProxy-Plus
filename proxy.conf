# -*- coding: utf-8 -*-

server_type = 'simple'
appid = ''
password = ''
crypto = ''
onlyone = ''
output = None
https = False
pac = True
gaehost_http = 'www.google.cn|ipv6.google.com|203.208.46.2|203.208.46.3|203.208.46.4|203.208.46.5|203.208.46.6|203.208.46.7|203.208.46.8|209.85.175.32|209.85.175.33|209.85.175.37|209.85.175.34|209.85.175.35|209.85.175.40|209.85.175.41|209.85.175.63|209.85.175.51|209.85.175.69'
#gaehost_https = 'mail.google.com|www.google.com.hk'

del plugins['plugins.hosts']

#@print_result
#def find_http_handler(method, url, headers):
#    if url.hostname in ('127.0.0.1', 'localhost'): return rawproxy[0]
#    if method not in ('GET', 'HEAD', 'PUT', 'POST', 'DELETE'): return rawproxy[0]
#    if method == 'DELETE': return forold
#    port = url.port
#    if 80<=port<=90 or 440<=port<=450 or port>=1024: return gaeproxy
#    return forold

#forold = [{'proxy': 'http://127.0.0.1:8086',
#    'url': '',
#    'crypto': 'XOR--0',
#    'key': '',
#}]
#plugins['plugins.forold'] = 'forold'

gae_extra_option = {
    #'range0': 100000,
    #'range': 500000,
    'max_threads': 4,
    #'headers': 'Content-Type: application/octet-stream',
    #'proxy': '',
}

server_extra_option = {
    #'listen': ('127.0.0.1', 8086),
    #'keep_alive': True,
}

if appid:
    if isinstance(crypto, basestring): crypto += '|'*20
    if isinstance(password, basestring): password += ('|'+password)*20
    app = zip(*(app.split('|') if isinstance(app, basestring) else app
                for app in (appid, crypto, password)))
    gaeproxy = []; https = 'https' if https else 'http'
    for appid,crypto,password in app:
        appid = {'url': '%s://%s.appspot.com/%s.html' % (https, appid, server_type)}
        if crypto: appid['crypto'] = crypto
        appid['key'] = password
        gaeproxy.append(appid)
    gaeproxy[0].update(gae_extra_option)
    gaeproxy[0].setdefault('proxy', '')
    del plugins['plugins.gaeproxy'], app
    plugins['plugins.'+server_type] = 'gaeproxy'
    if find_http_handler.__name__ == 'default_find_http_handler':
        def find_http_handler(method, url, headers):
            if use_onlyone(url.hostname): return gaeproxy[0]
            return gaeproxy
if 'gaehost_http' in vars() and isinstance(gaehost_http, basestring):
    gaehost_http = gaehost_http and gaehost_http.split('|') or None
if 'gaehost_https' in vars() and isinstance(gaehost_https, basestring):
    gaehost_https = gaehost_https and gaehost_https.split('|') or None
if isinstance(onlyone, basestring):
    onlyone = onlyone and onlyone.split('|') or []
onlyone_domain = set(onlyone)
server['log_file'] = output
server.update(server_extra_option)
#autoproxy = autoproxy[0],
if not pac: del plugins['plugins.autoproxy']
elif 'listen' in server:
    pac = autoproxy[0].pop('PROXY 127.0.0.1:8086; DIRECT')
    autoproxy[0]['PROXY %s:%s; DIRECT' % server['listen']] = ((pac[0][0], 'http://%s:%s' % server['listen']), pac[1])
del (server_type, appid, password, crypto, onlyone, output, https, pac,
     gae_extra_option, server_extra_option)

#格式备忘，99%的人请无视：验证用户有效性，如果仅供个人使用，return True即可
# ip: client ip
# reqtype: http/https/socks4/socks5
# args: (method, url, headers) for http
# args: (host, port, headers) for https
# args: (cmd, ip, port, userid) for socks4
# args: (cmd, ip, port, username, password) for socks5
# please return True if client user is valid else False
#def check_client(ip, reqtype, args):
#    return True
